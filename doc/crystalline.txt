*crystalline.txt* Functions to help you make your own statusline/tabline

Author:  Roger Bongers <https://github.com/rbong>
License: Same terms as Vim itself (see |license|)

INTRODUCTION                                                     *crystalline*

vim-crystalline has functions to help you make your own statusline/tabline.
It allows you to use the same syntax for creating your statusline/tabline as
Vim itself. See |'statusline'| for basic information on setting your
statusline/tabline.

SETTINGS                                                *crystalline-settings*

These global settings can be set before vim-crystalline is loaded in order to
automatically set up the statusline and tabline.

g:CrystallineStatuslineFn                          *g:CrystallineStatuslineFn*

May be a |function()| reference or defined with |:function|.

The output of the function will be used as the statusline. See 'statusline'
for more information on statusline syntax.

The function should accept one argument, which is an object containing the
following:

  curr    Whether the window is the currently focused window.
  w       The width of the current window.

If you do not need the statusline to update when the mode or current window
changes, instead use ":set statusline=%!MyStatusLine()".

g:CrystallineTablineFn                                *g:CrystallineTablineFn*

May be a |function()| reference or defined with |:function|.

The output of the function will be used as the tabline. See 'statusline' for
more information on statusline syntax.

If you do not need the tabline to update when the mode or current window
changes, instead use ":set tabline=%!MyTabLine()".

g:CrystallineTablabelFn                              *g:CrystallineTablabelFn*

May be a |function()| reference or defined with |:function|.

Must accept two arguments, the buffer number and the maximum label width. The
output of the function will be used as the current buffer/tab label when
|crystalline#bufferline()| is used.

See also |crystalline#bufferline()|, |crystalline#default_tablabel_parts()|.

g:crystalline_theme                                      *g:crystalline_theme*

Automatically set the given theme.

g:crystalline_mode_labels                          *g:crystalline_mode_labels*

The labels to use for the different modes. By default, it will be the
capitalized full name of each mode.

The setting must be a dictionary of strings. The keys are first character
returned from |mode()| and the values are the labels.

g:crystalline_enable_sep                            *g:crystalline_enable_sep*

Enable using special separator symbols between sections/tabs, similar to
powerline.

Separators will automatically appear on the tabline using
|crystalline#bufferline()|, and can be generated for the statusline using
|crystalline#sep()|.

g:crystalline_separators                            *g:crystalline_separators*

The separators to use between sections/tabs.

This is a list of objects containing the following keys:

  ch          The character to use for the separator.
  same_bg_ch  The character to use for the separator when two highlight groups
              have the same background.
  dir         The direction of the separator, either ">" or "<".

Defaults to:

>
    let g:crystalline_separators = [
          \ { 'ch': '', 'same_bg_ch': '', 'dir': '>' },
          \ { 'ch': '', 'same_bg_ch': '', 'dir': '<' },
          \ ]
<

g:crystalline_tab_sep_index                      *g:crystalline_tab_sep_index*

The index of the separator to use between tabs. Defaults to 0.

g:crystalline_hide_buf_tab                        *g:crystalline_hide_buf_tab*

The name of a function to determine if a buffer should be hidden from tabline
using |crystalline#bufferline()|. The function must accept one argument, the
buffer number.

Defaults to 'crystalline#hide_buf_tab', which returns true if a buffer does
not exist, it is not listed, or it is a quickfix buffer.

FUNCTIONS                                              *crystalline-functions*

crystalline#mode_group(group)                       *crystalline#mode_group()*

Accepts one argument, the highlight group suffix. Returns the highlight group
for the current mode with the prefix "Crystalline" omitted.

For example, in normal mode this returns "NormalModeA":

>
    crystalline#mode_group('A')
<

Can be used with |crystalline#sep()|.

See |crystalline-highlight-groups| for the list of mode highlight groups.

crystalline#mode_color(group)                       *crystalline#mode_color()*

Accepts one argument, the highlight group suffix.

Return a statusline highlight group item for the current mode. Can be used to
change the color of different sections of the statusline or tabline based on
the current mode.

See |crystalline-highlight-groups| for the list of mode highlight groups.

crystalline#mode_label()                            *crystalline#mode_label()*

Return a label for the current mode. Can be used to display the current mode
on the statusline or tabline.

                                                  *crystalline#mode_section()*
crystalline#mode_section(sep_index, mode_group, right_group)

Accepts three arguments: the separator index to use, the mode group suffix,
and the next group. Returns a section displaying the current mode.

This is equivalent to:

>
    crystalline#mode_color(a:mode_group)
          \ . crystalline#mode_label() 
          \ . crystalline#sep(a:sep_index, crystalline#mode_group(a:mode_group), a:right_group)
<

See also |crystalline#mode_group()|, |crystalline#mode_color()|,
|crystalline#mode_label()|, |crsytalline#sep()|.

crystalline#bufferline(opts)                        *crystalline#bufferline()*

Return a string of items which can be used on the statusline/tabline. It
displays the current buffers if there is only one tab, otherwise displays the
tabs.

Accepts one argument, which is an object containing:

  used_items

    Tells the function how many "%" items are already in use. The
    statusline/tabline can only hold 80 items.

  used_width

    Tells the functions how much screen width is already in use so that it can
    fit as many tabs as possible.

  tab_sel_group

    The highlight group to use for the currently selected tab. Can use
    |crystalline#mode_group()| for the current mode color.

    Defaults to "TabSel".

    See |crystalline-highlight-groups| for the list of all highlight groups.

  show_tab_type

    Whether the tab type (buffers/tabs) should be shown.

  use_tabs

    Whether to show tabs rather than buffers. By default, shows tabs when more
    than one tab is present.

  allow_mouse

    Allow clicking on tabs to switch between them. Not supported by buffers.

  tabwidth

    The maximum width of tabs. See also |crystalline#default_tabwidth()|.

    May be required when using |g:CrystallineTablabelFn|.

  tabitems

    The number of "%" items on each tab.

    May be required when using |g:CrystallineTablabelFn|.

  tabselitems

    The number of "%" items on each selected tab.

    May be required when using |g:CrystallineTablabelFn|.

                                        *crystalline#default_tablabel_parts()*
crystalline#default_tablabel_parts(buf, max_width)

Returns the default tablabel components used in |crystalline#bufferline()|.
The return value is an array containing the tab left side, full name, short
name, and right side.

crystalline#default_tabwidth()                *crystalline#default_tabwidth()*

Returns the default tabwidth for |crystalline#bufferline()|.

crystalline#sep(sep_index, left_group, right_group)        *crystalline#sep()*

Generate a separator between sections and start a statusline highlight group
item for the next section.

Accepts the following arguments:

  sep_index     The index of the separator from |g:crystalline_separators| to
                use.
  left_group    The left side highlight group to use.
  right_group   The right side highlight group to use.

Highlight groups are the names of highlight groups from
|crystalline-highlight-groups| with the prefix "Crystalline" omitted.

Groups support the return value from |crystalline#mode_hi()|.

HIGHLIGHT GROUPS                                *crystalline-highlight-groups*
                                                          *crystalline-themes*

vim-crystalline themes typically define these highlight groups.

Some themes which come with Crystalline automatically adjust to the
'background' with light/dark modes.

You can define a new theme by defining an autoload function with the format
"crystalline#theme#theme_name#set_theme".

Custom themes may define more than just the highlight groups defined here. For
example, highlight groups "CrystallineC", "CrystallineD",
"CrystallineNormalModeB", "CrystallineNormalModeMid", etc.

For an example of creating a custom theme, see the solarized theme:
<https://github.com/rbong/vim-crystalline/blob/master/autoload/crystalline/theme/solarized.vim>

CrystallineA                                                 *hl-CrystallineA*

Can be used for the color of the leftmost/rightmost section if mode coloring
is not used.

CrystallineB                                                 *hl-CrystallineB*

Can be used for the color of the second section from the left/right.

CrystallineMid                                             *hl-CrystallineMid*

A color which can be used for the middle of the statusline.

CrystallineInactiveMid                             *hl-CrystallineInactiveMid*

A color which can be used for statuslines on non-current windows.

CrystallineNormalModeA                             *hl-CrystallineNormalModeA*

The color of A sections when normal mode is active.

See |crystalline#mode_sec()| and |crystalline#mode_hi()|.

CrystallineInsertModeA                             *hl-CrystallineInsertModeA*

The color of A sections when insert mode is active.

See |crystalline#mode_sec()| and |crystalline#mode_hi()|.

CrystallineVisualModeA                             *hl-CrystallineVisualModeA*

The color of A sections when visual mode is active.

See |crystalline#mode_sec()| and |crystalline#mode_hi()|.

CrystallineReplaceModeA                           *hl-CrystallineReplaceModeA*

The color of A sections when replace mode is active.

See |crystalline#mode_sec()| and |crystalline#mode_hi()|.

CrystallineTab                                             *hl-CrystallineTab*

The color of tabs which are not currently selected on the bufferline. It can
also be used for regular sections of the tabline.

See |crystalline#bufferline()|.

CrystallineTabType                                     *hl-CrystallineTabType*

The color of the tab type label on the bufferline

See |crystalline#bufferline()|.

CrystallineTabSel                                       *hl-CrystallineTabSel*

Can be used for the color of tabs which are currently selected on the
bufferline if mode coloring is not used.

See |crystalline#bufferline()|.

CrystallineTabMid                                       *hl-CrystallineTabMid*

A color which can be used for the space between the left and right side of the
tabline.

See |crystalline#bufferline()|.

EXAMPLE                                                  *crystalline-example*

>
    function! g:CrystallineStatuslineFn(ctx)
      let l:s = ''

      if a:ctx.curr
        let l:s .= crystalline#mode_section(0, 'A', 'B')
      else
        let l:s .= '%#CrystallineInactive#'
      endif
      let l:s .= ' %f%h%w%m%r '
      if a:ctx.curr
        let l:s .= crystalline#sep(0, 'B', 'Mid') . ' %{fugitive#Head()}'
      endif

      let l:s .= '%='
      if a:ctx.curr
        let l:s .= crystalline#sep(1, 'Mid', 'B') . ' %{&paste ?"PASTE ":""}%{&spell?"SPELL ":""}'
        let l:s .= crystalline#sep(1, 'B', crystalline#mode_group('A'))
      endif
      if a:ctx.w > 80
        let l:s .= ' %{&ft}[%{&fenc!=#""?&fenc:&enc}][%{&ff}] %l/%L %c%V %P '
      else
        let l:s .= ' '
      endif

      return l:s
    endfunction

    function! g:CrystallineTablineFn()
      let l:vimlabel = has('nvim') ?  ' NVIM ' : ' VIM '
      return crystalline#bufferline({
            \ 'used_items': 2,
            \ 'used_width': len(l:vimlabel),
            \ })
            \ . '%=%#CrystallineTab# ' . l:vimlabel
    endfunction

    let g:crystalline_enable_sep = 1
    let g:crystalline_theme = 'default'

    set showtabline=2
    set guioptions-=e
    set laststatus=2
<

See <https://github.com/rbong/vim-crystalline> for more examples.

 vim:tw=78:ts=8:ft=help
